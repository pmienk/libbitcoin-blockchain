/**
 * Copyright 2011-2015
 *
 * Modified from https://github.com/BoostGSoC13/boost.trie
 *
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LIBBITCOIN_BLOCKCHAIN_RED_BLACK_ITERATOR_HPP
#define LIBBITCOIN_BLOCKCHAIN_RED_BLACK_ITERATOR_HPP

#include <bitcoin/bitcoin.hpp>
#include <bitcoin/blockchain/tree/red_black_node.hpp>
#include <bitcoin/blockchain/tree/red_black_tree.hpp>

namespace libbitcoin {
namespace blockchain {

template <typename Key, typename Value, typename Reference, typename Pointer>
class red_black_iterator
{
public:

    typedef ptrdiff_t difference_type;
    typedef std::bidirectional_iterator_tag iterator_category;
    typedef Pointer pointer;
    typedef Reference reference;
    typedef Value value_type;

    typedef Key key_type;
    typedef red_black_node<Key, Value> node_type;

    typedef red_black_iterator<Key, Value, Reference, Pointer> iter_type;
    typedef red_black_iterator<Key, Value, Value&, Value*> iterator;
    typedef red_black_iterator<Key, Value, const Value&, const Value*> const_iterator;

public:

    // constructors
    explicit red_black_iterator();

//    red_black_iterator(node_type* nil, node_type* root, node_type* node);

    template<typename Comparer, typename Allocator>
    red_black_iterator(red_black_tree<Key, Value, Comparer, Allocator>* tree,
        node_type* node);

    red_black_iterator(const iterator& it);

    // accessors
    key_type get_key();

    // iterator methods
    reference operator*() const;

    pointer operator->() const;

    bool operator==(const iter_type& other) const;

    bool operator!=(const iter_type& other) const;

    iter_type& operator++();

    iter_type operator++(int);

    iter_type& operator--();

    iter_type operator--(int);

protected:

    // increment/decrement implementation
    void increment();
    void decrement();

    node_type* get_leftmost_child(node_type* node) const;
    node_type* get_rightmost_child(node_type* node) const;

private:

    node_type* nil_;
    node_type* root_;
    node_type* node_;
};

} // namespace blockchain
} // namespace libbitcoin

#include <bitcoin/blockchain/impl/tree/red_black_iterator.ipp>

#endif
