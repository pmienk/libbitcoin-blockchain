/**
 * Copyright 2011-2015
 *
 * Modified from https://github.com/BoostGSoC13/boost.trie
 *
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LIBBITCOIN_BLOCKCHAIN_FIXED_SECONDARY_KEY_VALUE_ITERATOR_HPP
#define LIBBITCOIN_BLOCKCHAIN_FIXED_SECONDARY_KEY_VALUE_ITERATOR_HPP

#include <bitcoin/bitcoin.hpp>
#include <bitcoin/blockchain/trie/fixed_secondary_key_structure_iterator.hpp>
#include <bitcoin/blockchain/trie/trie_value_node.hpp>

namespace libbitcoin {
namespace blockchain {

template<typename Key,
    typename Value,
    typename KeyComparer,
    typename ValueComparer,
    typename StructureNodeAllocator,
    typename ValueNodeAllocator>
class modified_patricia_trie;

template <typename Key,
    typename Value,
    typename Pointer,
    typename Reference,
    typename Comparer>
class fixed_secondary_key_value_iterator
{
    template <typename K, typename V, typename KC, typename VC, typename SNA,
        typename VNA>
    friend class modified_patricia_trie;

public:

    typedef ptrdiff_t difference_type;
    typedef std::bidirectional_iterator_tag iterator_category;
    typedef Pointer pointer;
    typedef Reference reference;
    typedef Value value_type;

    typedef Key key_type;

    typedef fixed_secondary_key_value_iterator<Key, Value, Pointer, Reference,
        Comparer> iter_type;
    typedef fixed_secondary_key_value_iterator<Key, Value, Value&, Value*,
        Comparer> iterator;
    typedef fixed_secondary_key_value_iterator<Key, Value, const Value&,
        const Value*, Comparer> const_iterator;

    typedef trie_structure_node<Key, Value, Comparer> structure_node_type;
    typedef structure_node_type* structure_node_ptr;
    typedef trie_value_node<value_type, structure_node_type> value_node_type;
    typedef value_node_type* value_node_ptr;
    typedef fixed_secondary_key_structure_iterator<key_type,
        structure_node_ptr, structure_node_ptr> structure_iterator;

public:

    // constructors
    explicit fixed_secondary_key_value_iterator();

    fixed_secondary_key_value_iterator(structure_node_ptr node);

    fixed_secondary_key_value_iterator(const key_type& key,
        structure_node_ptr node);

    fixed_secondary_key_value_iterator(const key_type& key,
        value_node_ptr value_node);

    fixed_secondary_key_value_iterator(const iterator& it);

    // accessors
    binary_type get_primary_key();

    bool first_value_with_primary_key() const;

    bool last_value_with_primary_key() const;

    key_type get_secondary_key() const;

    structure_iterator get_structure_iterator() const;

    // iterator methods
    reference operator*() const;

    pointer operator->() const;

    bool operator==(const iter_type& other) const;

    bool operator!=(const iter_type& other) const;

    iter_type& operator++();

    iter_type operator++(int);

    iter_type& operator--();

    iter_type operator--(int);

protected:

    // increment/decrement implementation
    void increment();
    void decrement();

private:

    structure_iterator iterator_;
    value_node_ptr value_node_;
};

} // namespace blockchain
} // namespace libbitcoin

#include <bitcoin/blockchain/impl/trie/fixed_secondary_key_value_iterator.ipp>

#endif
