/**
 * Copyright 2011-2015
 *
 * Modified from https://github.com/BoostGSoC13/boost.trie
 *
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LIBBITCOIN_BLOCKCHAIN_REVERSE_ITERATOR_IPP
#define LIBBITCOIN_BLOCKCHAIN_REVERSE_ITERATOR_IPP

namespace libbitcoin {
namespace blockchain {

// reverse_iterator implementation
template <typename Iterator>
reverse_iterator<Iterator>::reverse_iterator()
    : base_iterator_()
{
}

template <typename Iterator>
reverse_iterator<Iterator>::reverse_iterator(base_iter_type it)
    : base_iterator_(it)
{
}

template <typename Iterator>
reverse_iterator<Iterator>::reverse_iterator(
    const iter_type& other)
    : base_iterator_(other.base())
{
}

template <typename Iterator>
template<typename Iter>
reverse_iterator<Iterator>::reverse_iterator(
    const reverse_iterator<Iter>& other)
    : base_iterator_(other.base())
{
}

template <typename Iterator>
typename reverse_iterator<Iterator>::reference
    reverse_iterator<Iterator>::operator*() const
{
    auto it = base_iterator_;
    return *--it;
}

template <typename Iterator>
typename reverse_iterator<Iterator>::pointer
    reverse_iterator<Iterator>::operator->() const
{
    return &(operator*());
}

template <typename Iterator>
bool reverse_iterator<Iterator>::operator==(
    const iter_type& other) const
{
    return base() == other.base();
}

template <typename Iterator>
bool reverse_iterator<Iterator>::operator!=(
    const iter_type& other) const
{
    return !(*this == other);
}

template <typename Iterator>
typename reverse_iterator<Iterator>::iter_type&
    reverse_iterator<Iterator>::operator++()
{
    --base_iterator_;
    return *this;
}

template <typename Iterator>
typename reverse_iterator<Iterator>::iter_type
    reverse_iterator<Iterator>::operator++(int)
{
    auto it = *this;
    --base_iterator_;
    return it;
}

template <typename Iterator>
typename reverse_iterator<Iterator>::iter_type&
    reverse_iterator<Iterator>::operator--()
{
    ++base_iterator_;
    return *this;
}

template <typename Iterator>
typename reverse_iterator<Iterator>::iter_type
    reverse_iterator<Iterator>::operator--(int)
{
    auto it = *this;
    ++base_iterator_;
    return it;
}

template <typename Iterator>
typename reverse_iterator<Iterator>::base_iter_type
    reverse_iterator<Iterator>::base() const
{
    return base_iterator_;
}

} // namespace blockchain
} // namespace libbitcoin

#endif
