/**
 * Copyright 2011-2015
 *
 * Modified from https://github.com/BoostGSoC13/boost.trie
 *
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LIBBITCOIN_BLOCKCHAIN_FIXED_SECONDARY_KEY_STRUCTURE_ITERATOR_IPP
#define LIBBITCOIN_BLOCKCHAIN_FIXED_SECONDARY_KEY_STRUCTURE_ITERATOR_IPP

namespace libbitcoin {
namespace blockchain {

// trie_structure_iterator implementation
template <typename Key, typename Value, typename Pointer>
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::fixed_secondary_key_structure_iterator()
    : trie_node_(nullptr), cached_primary_key_(), secondary_key_()
{
}

template <typename Key, typename Value, typename Pointer>
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::fixed_secondary_key_structure_iterator(
    node_ptr node)
    : trie_node_(node), cached_primary_key_(), secondary_key_()
{
    if (trie_node_ != nullptr)
    {
        auto begin = trie_node_->store.begin();
        auto end = trie_node_->store.end();

        if (begin != end)
            secondary_key_ = begin.get_key();
    }
}

template <typename Key, typename Value, typename Pointer>
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::fixed_secondary_key_structure_iterator(
    const key_type& key, node_ptr node)
    : trie_node_(node), cached_primary_key_(), secondary_key_(key)
{
}

template <typename Key, typename Value, typename Pointer>
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::fixed_secondary_key_structure_iterator(
    const iterator& it)
    : trie_node_(it.trie_node_), cached_primary_key_(it.cached_primary_key_),
      secondary_key_(it.secondary_key_)
{
}

template <typename Key, typename Value, typename Pointer>
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator bool() const
{
    return (trie_node_ != nullptr);
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::reference
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator*() const
{
    return trie_node_;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::pointer
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator->() const
{
    return &(operator*());
}

template <typename Key, typename Value, typename Pointer>
bool fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator==(
    const iter_type& other) const
{
    return (trie_node_ == other.trie_node_);
}

template <typename Key, typename Value, typename Pointer>
bool fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator!=(
    const iter_type& other) const
{
    return !(*this == other);
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::iter_type&
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator++()
{
    increment();
    return *this;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::iter_type
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator++(int)
{
    auto it = *this;
    increment();
    return it;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::iter_type&
fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator--()
{
    decrement();
    return *this;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::iter_type
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::operator--(int)
{
    auto it = *this;
    decrement();
    return it;
}

template <typename Key, typename Value, typename Pointer>
void fixed_secondary_key_structure_iterator<Key, Value, Pointer>::increment()
{
    cached_primary_key_.resize(0);

    if (trie_node_ != nullptr)
        trie_node_ = next_node_with_value(secondary_key_, trie_node_);
}

template <typename Key, typename Value, typename Pointer>
void fixed_secondary_key_structure_iterator<Key, Value, Pointer>::decrement()
{
    cached_primary_key_.resize(0);

    if (trie_node_ != nullptr)
        trie_node_ = previous_node_with_value(secondary_key_, trie_node_);
}

template <typename Key, typename Value, typename Pointer>
binary_type fixed_secondary_key_structure_iterator<Key, Value, Pointer>::get_primary_key()
{
    if (cached_primary_key_.size() == 0)
    {
        std::vector<node_ptr> nodes;

        auto current = trie_node_;
        while (current != nullptr)
        {
            nodes.push_back(current);
            current = current->parent;
        }

        for (auto node = nodes.rbegin(); node != nodes.rend(); ++node)
            cached_primary_key_.append((*node)->label);
    }

    return cached_primary_key_;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::key_type
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::get_secondary_key() const
{
    return secondary_key_;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::node_ptr
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::get_leftmost_node(
        const key_type& key, node_ptr origin) const
{
    auto result = origin;
    auto query_result = origin->store.retrieve(key);

    if (query_result.second)
        result = (*query_result.first).head_leftmost->anchor;

    return result;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::node_ptr
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::get_rightmost_leaf(
        const key_type& key, node_ptr origin) const
{
    auto result = origin;
    auto query_result = origin->store.retrieve(key);

    if (query_result.second)
        result = (*query_result.first).tail_rightmost->anchor;

    return result;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::node_ptr
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::next_node_with_value(
        const key_type& key, node_ptr node)
{
    // if at root (designated by null parent), terminate
    if (node->parent == nullptr)
        return node;

    auto next = node;
    if (next->has_children(key))
    {
        // if this node has a child, then at least one value will be located
        // within the subtree, walk the subtree favoring first child until
        // a value is reached
        auto child = next->get_first_child(key);
        auto query_result = child->store.retrieve(key);
        next = (*query_result.first).head_leftmost->anchor;
    }
    else
    {
        // if a leaf, back up until a sibling is reached
        while (next->parent != nullptr)
        {
            auto parent = next->parent;
            auto sibling = parent->get_last_child(key);

            // if sibling found, descend first children until value
            if ((sibling != nullptr) && (sibling != next))
            {
                next = get_leftmost_node(key, sibling);
                break;
            }

            next = parent;
        }
    }

    return next;
}

template <typename Key, typename Value, typename Pointer>
typename fixed_secondary_key_structure_iterator<Key, Value, Pointer>::node_ptr
    fixed_secondary_key_structure_iterator<Key, Value, Pointer>::previous_node_with_value(
        const key_type& key, node_ptr node)
{
    // if at root (designated by null parent), return rightmost child with value
    if (node->parent == nullptr)
        return get_rightmost_leaf(key, node);

    auto next = node;

    // if previous is root, then was first and must return original node
    while (next->parent != nullptr)
    {
        auto parent = next->parent;

        // if stepping up encounters values, use them
        if (parent->has_value(key))
        {
            next = parent;
            break;
        }

        auto sibling = parent->get_first_child(key);

        // if sibling found, descend second children until value
        if ((sibling != nullptr) && (sibling != next))
        {
            next = get_rightmost_leaf(key, sibling);
            break;
        }

        next = parent;
    }

    // if previous turned out to be root, was first, so return original node
    if (next->parent == nullptr)
        next = node;

    return next;
}

} // namespace blockchain
} // namespace libbitcoin

#endif
